import { useState, useEffect } from 'react';
import Head from 'next/head';
import Layout from '../../components/layout/Layout';
import { useRouter } from 'next/router';
import {
  MessageSquare,
  Heart,
  Reply,
  Plus,
  TrendingUp,
  Clock,
  Users,
  ArrowLeft,
  AlertTriangle,
  CheckCircle,
  XCircle
} from 'lucide-react';

export default function TopicDetail() {
  const router = useRouter();
  const { id } = router.query;
  const [topic, setTopic] = useState(null);
  const [replies, setReplies] = useState([]);
  const [newReplyContent, setNewReplyContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [moderationResult, setModerationResult] = useState(null);

  // ‰ªÆ„ÅÆ„Éá„Éº„Çø„ÄÇÂÆüÈöõ„Å´„ÅØAPI„Åã„ÇâÂèñÂæó„Åó„Åæ„Åô„ÄÇ
  const allTopics = [
    {
      id: '1',
      author: 'Ëµ§„Éò„É´Â§™ÈÉé',
      title: '‰ªäÊó•„ÅÆË©¶Âêà„Å´„Å§„ÅÑ„Å¶Ë™û„Çç„ÅÜÔºÅ',
      content: '9ÂõûË£è„ÅÆÈÄÜËª¢Âäá„ÄÅÊú¨ÂΩì„Å´ÊÑüÂãï„Åó„Åæ„Åó„ÅüÔºÅ„Åø„Çì„Å™„ÅØ„Å©„ÅÜÊÄù„Å£„ÅüÔºü',
      created_at: '2025/08/12(Êúà) 20:15:23.45',
      likes: 24,
      reply_count: 2,
      category: 'Ë©¶ÂêàÊÑüÊÉ≥'
    },
    {
      id: '4',
      author: '„Çπ„Çø„Ç∏„Ç¢„É†Â∏∏ÈÄ£',
      title: '„Éû„ÉÑ„ÉÄ„Çπ„Çø„Ç∏„Ç¢„É†„ÅÆ„Åä„Åô„Åô„ÇÅ„Ç∞„É´„É°',
      content: '„Çπ„Çø„Ç∏„Ç¢„É†„ÅßÈ£ü„Åπ„Çâ„Çå„ÇãÁæéÂë≥„Åó„ÅÑ„ÇÇ„ÅÆ„ÇíÊïô„Åà„Å¶ÔºÅÁâπ„Å´„Éì„Éº„É´„ÅÆ„Åä„Å§„Åæ„Åø„ÅåÁü•„Çä„Åü„ÅÑ„Åß„Åôüç∫',
      created_at: '2025/08/12(Êúà) 18:30:15.23',
      likes: 18,
      reply_count: 1,
      category: '„Ç∞„É´„É°'
    },
    {
      id: '6',
      author: 'ÂøúÊè¥Âõ£Èï∑',
      title: 'Êù•ÈÄ±„ÅÆÂ∑®‰∫∫Êà¶„ÄÅ‰∏ÄÁ∑í„Å´ÂøúÊè¥„Åó„Åæ„Åõ„Çì„ÅãÔºü',
      content: 'Êù•ÈÄ±„ÅÆÂ∑®‰∫∫Êà¶„ÅÆ„ÉÅ„Ç±„ÉÉ„Éà„ÇíÂèñ„Çä„Åæ„Åó„ÅüÔºÅ‰∏ÄÁ∑í„Å´ÂøúÊè¥„Åó„Å¶„Åè„Çå„Çã‰ª≤Èñì„ÇíÂãüÈõÜ‰∏≠„Åß„Åô„ÄÇ',
      created_at: '2025/08/12(Êúà) 16:45:08.91',
      likes: 31,
      reply_count: 0,
      category: 'ÂøúÊè¥ÂãüÈõÜ'
    }
  ];

  const allReplies = [
    {
      id: 1,
      topic_id: '1',
      author: '„Ç´„Éº„ÉóÂ•≥Â≠ê',
      content: 'Êú¨ÂΩì„Å´ÊÑüÂãïÁöÑ„Åß„Åó„ÅüÔºÅÊúÄÂæå„Åæ„ÅßË´¶„ÇÅ„Å™„ÅÑÂßøÂã¢„ÅåÁ¥†Êô¥„Çâ„Åó„ÅÑÔºÅ',
      created_at: '2025/08/12(Êúà) 20:30:15.23',
      likes: 12
    },
    {
      id: 2,
      topic_id: '1',
      author: 'Â∫ÉÂ≥∂„Å£Â≠ê',
      content: '9ÂõûË£è„ÅÆ‰ª£ÊâìÁ≠ñ„ÅåË¶ã‰∫ã„Å´„Éè„Éû„Çä„Åæ„Åó„Åü„Å≠„ÄÇÁõ£Áù£„ÅÆÈááÈÖç„ÇÇÂÖâ„Çä„Åæ„Åó„Åü„ÄÇ',
      created_at: '2025/08/12(Êúà) 20:45:32.11',
      likes: 8
    },
    {
      id: 3,
      topic_id: '4',
      author: '„Ç∞„É´„É°ÈÄö',
      content: '„Ç´„Éº„Éó„ÅÜ„Å©„Çì„ÅØÁµ∂ÂØæÈ£ü„Åπ„Çã„Åπ„ÅçÔºÅ„ÅÇ„Å®„ÄÅ„ÇÇ„Åø„ÅòÈ•ÖÈ†≠„ÇΩ„Éï„Éà„ÇØ„É™„Éº„É†„ÇÇ„Åä„Åô„Åô„ÇÅ„Åß„Åô„ÄÇ',
      created_at: '2025/08/12(Êúà) 19:15:44.67',
      likes: 15
    }
  ];

  useEffect(() => {
    if (id) {
      // „Éà„Éî„ÉÉ„ÇØ„ÇíÂèñÂæó
      const foundTopic = allTopics.find(t => t.id === id);
      setTopic(foundTopic);

      // Ëøî‰ø°„ÇíÂèñÂæó
      const topicReplies = allReplies.filter(r => r.topic_id === id);
      setReplies(topicReplies);
    }
  }, [id]);

  const analyzeContent = async (content) => {
    try {
      const response = await fetch('http://localhost:5000/api/moderation/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content: content,
          type: 'reply',
          user_id: 'current_user',
          content_id: `reply_${Date.now()}`
        }),
      });

      const data = await response.json();
      if (data.success) {
        return data.moderation;
      } else {
        console.error('„É¢„Éá„É¨„Éº„Ç∑„Éß„É≥ÂàÜÊûê„Ç®„É©„Éº:', data.error);
        return null;
      }
    } catch (error) {
      console.error('„É¢„Éá„É¨„Éº„Ç∑„Éß„É≥ÂàÜÊûê„É™„ÇØ„Ç®„Çπ„Éà„Ç®„É©„Éº:', error);
      return null;
    }
  };

  const handleSubmitReply = async (e) => {
    e.preventDefault();
    if (!newReplyContent.trim()) return;

    setIsSubmitting(true);
    setModerationResult(null);

    try {
      // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„É¢„Éá„É¨„Éº„Ç∑„Éß„É≥ÂàÜÊûê
      const moderation = await analyzeContent(newReplyContent);
      setModerationResult(moderation);

      if (moderation && !moderation.safe_to_post) {
        setIsSubmitting(false);
        return;
      }

      // Ëøî‰ø°„ÇíÊäïÁ®øÔºàÂÆüÈöõ„Å´„ÅØAPI„Å´ÈÄÅ‰ø°Ôºâ
      const newReply = {
        id: replies.length + 1,
        topic_id: id,
        author: 'ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„Éº',
        content: newReplyContent,
        created_at: new Date().toLocaleString('ja-JP'),
        likes: 0
      };

      setReplies([...replies, newReply]);
      setNewReplyContent('');
      setModerationResult(null);
    } catch (error) {
      console.error('Ëøî‰ø°ÊäïÁ®ø„Ç®„É©„Éº:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleLike = (replyId) => {
    setReplies(replies.map(reply => 
      reply.id === replyId 
        ? { ...reply, likes: reply.likes + 1 }
        : reply
    ));
  };

  const handleTopicLike = () => {
    if (topic) {
      setTopic({ ...topic, likes: topic.likes + 1 });
    }
  };

  if (!topic) {
    return (
      <Layout>
        <div className="text-center py-8">
          <p className="text-gray-600">„Éà„Éî„ÉÉ„ÇØ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ</p>
        </div>
      </Layout>
    );
  }

  return (
    <>
      <Head>
        <title>{topic.title} - „Ç´„Éº„Éó„Ç≥„Éç„ÇØ„Éà</title>
      </Head>

      <Layout>
        <div className="space-y-6 carp-fade-in">
          {/* Êàª„Çã„Éú„Çø„É≥ */}
          <button
            onClick={() => router.back()}
            className="carp-btn carp-btn-ghost"
          >
            <ArrowLeft className="h-4 w-4" />
            <span>Êàª„Çã</span>
          </button>

          {/* „Éà„Éî„ÉÉ„ÇØË©≥Á¥∞ */}
          <div className="carp-card">
            <div className="carp-card-header">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <h1 className="text-xl font-bold mb-2">{topic.title}</h1>
                  <div className="flex items-center space-x-4 text-sm text-red-100">
                    <div className="flex items-center space-x-1">
                      <Users className="h-4 w-4" />
                      <span>{topic.author}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Clock className="h-4 w-4" />
                      <span>{topic.created_at}</span>
                    </div>
                  </div>
                </div>
                <span className="px-2 py-1 bg-red-500 text-white text-xs rounded-full">
                  {topic.category}
                </span>
              </div>
            </div>
            <div className="carp-card-content">
              <p className="text-gray-800 mb-4 leading-relaxed">{topic.content}</p>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <button
                    onClick={handleTopicLike}
                    className="flex items-center space-x-1 text-gray-600 hover:text-red-600 transition-colors"
                  >
                    <Heart className="h-4 w-4" />
                    <span>{topic.likes}</span>
                  </button>
                  <div className="flex items-center space-x-1 text-gray-600">
                    <MessageSquare className="h-4 w-4" />
                    <span>{replies.length}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Ëøî‰ø°‰∏ÄË¶ß */}
          <div className="carp-card">
            <div className="carp-card-header">
              <h2 className="text-lg font-semibold">Ëøî‰ø° ({replies.length})</h2>
            </div>
            <div className="carp-card-content">
              {replies.length === 0 ? (
                <p className="text-gray-600 text-center py-8">„Åæ„Å†Ëøî‰ø°„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÊúÄÂàù„ÅÆËøî‰ø°„ÇíÊäïÁ®ø„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜÔºÅ</p>
              ) : (
                <div className="space-y-4">
                  {replies.map((reply) => (
                    <div key={reply.id} className="border-b border-gray-200 pb-4 last:border-b-0">
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center space-x-2 text-sm text-gray-600">
                          <Users className="h-4 w-4" />
                          <span className="font-medium">{reply.author}</span>
                          <Clock className="h-4 w-4" />
                          <span>{reply.created_at}</span>
                        </div>
                      </div>
                      <p className="text-gray-800 mb-2 leading-relaxed">{reply.content}</p>
                      <div className="flex items-center space-x-4">
                        <button
                          onClick={() => handleLike(reply.id)}
                          className="flex items-center space-x-1 text-gray-600 hover:text-red-600 transition-colors"
                        >
                          <Heart className="h-4 w-4" />
                          <span>{reply.likes}</span>
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Ëøî‰ø°ÊäïÁ®ø„Éï„Ç©„Éº„É† */}
          <div className="carp-card">
            <div className="carp-card-header">
              <h2 className="text-lg font-semibold">Ëøî‰ø°„ÇíÊäïÁ®ø</h2>
            </div>
            <div className="carp-card-content">
              {/* „É¢„Éá„É¨„Éº„Ç∑„Éß„É≥ÁµêÊûúË°®Á§∫ */}
              {moderationResult && (
                <div className={`mb-4 p-4 rounded-lg border ${
                  moderationResult.safe_to_post 
                    ? 'bg-yellow-50 border-yellow-200' 
                    : 'bg-red-50 border-red-200'
                }`}>
                  <div className="flex items-center space-x-2">
                    {moderationResult.safe_to_post ? (
                      <AlertTriangle className="h-5 w-5 text-yellow-500" />
                    ) : (
                      <XCircle className="h-5 w-5 text-red-500" />
                    )}
                    <span className={`font-medium ${
                      moderationResult.safe_to_post ? 'text-yellow-800' : 'text-red-800'
                    }`}>
                      {moderationResult.reason}
                    </span>
                  </div>
                  {moderationResult.detected_issues && moderationResult.detected_issues.length > 0 && (
                    <ul className="mt-2 space-y-1">
                      {moderationResult.detected_issues.map((issue, index) => (
                        <li key={index} className={`text-sm ${
                          moderationResult.safe_to_post ? 'text-yellow-700' : 'text-red-700'
                        }`}>
                          ‚Ä¢ {issue}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
              )}

              <form onSubmit={handleSubmitReply} className="space-y-4">
                <div>
                  <label className="carp-label">Ëøî‰ø°ÂÜÖÂÆπ</label>
                  <textarea
                    value={newReplyContent}
                    onChange={(e) => setNewReplyContent(e.target.value)}
                    rows={4}
                    className="carp-input carp-textarea"
                    placeholder="Ëøî‰ø°„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."
                    required
                  />
                </div>
                <button 
                  type="submit" 
                  className="carp-btn carp-btn-primary"
                  disabled={isSubmitting || !newReplyContent.trim()}
                >
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>ÊäïÁ®ø‰∏≠...</span>
                    </>
                  ) : (
                    <>
                      <Reply className="h-4 w-4" />
                      <span>Ëøî‰ø°„ÇíÊäïÁ®ø</span>
                    </>
                  )}
                </button>
              </form>
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
}
