AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Carp Connect - AWS Serverless Architecture
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - staging
    - prod
    Description: Environment name
  CognitoDomainPrefix:
    Type: String
    Default: carp-connect-dev
    Description: Cognito domain prefix
Globals:
  Function:
    Timeout: 30
    Runtime: python3.13
    Environment:
      Variables:
        ENVIRONMENT:
          Ref: Environment
        USER_POOL_ID:
          Ref: CarpConnectUserPool
        USER_POOL_CLIENT_ID:
          Ref: CarpConnectUserPoolClient
        POSTS_TABLE:
          Ref: PostsTable
        USERS_TABLE:
          Ref: UsersTable
        MESSAGES_TABLE:
          Ref: MessagesTable
Resources:
  AppDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        Fn::Sub: carp-connect-dependencies-${Environment}
      Description: Python dependencies for the Carp Connect API
      ContentUri: ..\..\backend\lambda_layer
      CompatibleRuntimes:
      - python3.13
      LicenseInfo: MIT
      RetentionPolicy: Retain
    BuildMethod: python3.13
  CarpConnectUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: carp-connect-${Environment}
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
      - email
      UsernameAttributes:
      - email
      Schema:
      - Name: email
        AttributeDataType: String
        Required: true
        Mutable: true
      - Name: phone_number
        AttributeDataType: String
        Required: false
        Mutable: true
      - Name: name
        AttributeDataType: String
        Required: true
        Mutable: true
      - Name: birthdate
        AttributeDataType: String
        Required: true
        Mutable: true
      - Name: location
        AttributeDataType: String
        Required: false
        Mutable: true
      - Name: favorite_player
        AttributeDataType: String
        Required: false
        Mutable: true
      UserPoolTags:
        Project: CarpConnect
        Environment:
          Ref: Environment
  CarpConnectUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: CarpConnectUserPool
      ClientName:
        Fn::Sub: carp-connect-client-${Environment}
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      SupportedIdentityProviders:
      - COGNITO
      CallbackURLs:
      - http://localhost:3000
      - https://main.d1234567890.amplifyapp.com
      LogoutURLs:
      - http://localhost:3000
      - https://main.d1234567890.amplifyapp.com
      AllowedOAuthFlows:
      - code
      AllowedOAuthScopes:
      - email
      - openid
      - profile
      AllowedOAuthFlowsUserPoolClient: true
  CarpConnectUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: CognitoDomainPrefix
      UserPoolId:
        Ref: CarpConnectUserPool
  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: carp-connect-posts-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: created_at
        AttributeType: S
      - AttributeName: category
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: CategoryIndex
        KeySchema:
        - AttributeName: category
          KeyType: HASH
        - AttributeName: created_at
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      Tags:
      - Key: Project
        Value: CarpConnect
      - Key: Environment
        Value:
          Ref: Environment
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: carp-connect-users-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: user_id
        AttributeType: S
      - AttributeName: email
        AttributeType: S
      KeySchema:
      - AttributeName: user_id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: EmailIndex
        KeySchema:
        - AttributeName: email
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      Tags:
      - Key: Project
        Value: CarpConnect
      - Key: Environment
        Value:
          Ref: Environment
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: carp-connect-messages-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: conversation_id
        AttributeType: S
      - AttributeName: timestamp
        AttributeType: S
      - AttributeName: user_id
        AttributeType: S
      KeySchema:
      - AttributeName: conversation_id
        KeyType: HASH
      - AttributeName: timestamp
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: UserIndex
        KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      Tags:
      - Key: Project
        Value: CarpConnect
      - Key: Environment
        Value:
          Ref: Environment
  CarpConnectApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: carp-connect-api-${Environment}
      CodeUri: CarpConnectApiFunction
      Handler: lambda_handler.lambda_handler
      Layers:
      - Ref: AppDependenciesLayer
      Environment:
        Variables:
          POSTS_TABLE:
            Ref: PostsTable
          USERS_TABLE:
            Ref: UsersTable
          MESSAGES_TABLE:
            Ref: MessagesTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PostsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MessagesTable
      - Version: '''2012-10-17'''
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:AdminGetUser
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminUpdateUserAttributes
          Resource:
            Fn::GetAtt:
            - CarpConnectUserPool
            - Arn
      Events:
        ApiGateway:
          Type: Api
          Properties:
            RestApiId:
              Ref: CarpConnectApi
            Path: /{proxy+}
            Method: ANY
    Metadata:
      SamResourceId: CarpConnectApiFunction
  CarpConnectApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: carp-connect-api-${Environment}
      StageName:
        Ref: Environment
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
        MaxAge: 600
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - CarpConnectUserPool
              - Arn
        AddDefaultAuthorizerToCorsPreflight: false
      DefinitionBody:
        swagger: '''2.0'''
        info:
          title:
            Fn::Sub: carp-connect-api-${Environment}
          version: '''1.0'''
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CarpConnectApiFunction.Arn}/invocations
              responses: {}
  CarpConnectFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: carp-connect-files-${Environment}-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - POST
          - DELETE
          - HEAD
          AllowedOrigins:
          - '*'
          MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
      - Key: Project
        Value: CarpConnect
      - Key: Environment
        Value:
          Ref: Environment
  CarpConnectFilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: CarpConnectFilesBucket
      PolicyDocument:
        Statement:
        - Sid: PublicReadGetObject
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: ${CarpConnectFilesBucket}/*
Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: CarpConnectUserPool
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-UserPoolId
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value:
      Ref: CarpConnectUserPoolClient
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-UserPoolClientId
  UserPoolDomain:
    Description: Cognito User Pool Domain
    Value:
      Fn::Sub: https://${CognitoDomainPrefix}.auth.${AWS::Region}.amazoncognito.com
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-UserPoolDomain
  ApiGatewayUrl:
    Description: API Gateway URL
    Value:
      Fn::Sub: https://${CarpConnectApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiGatewayUrl
  S3BucketName:
    Description: S3 Bucket for file storage
    Value:
      Ref: CarpConnectFilesBucket
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-S3BucketName
  PostsTableName:
    Description: DynamoDB Posts Table Name
    Value:
      Ref: PostsTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PostsTableName
  UsersTableName:
    Description: DynamoDB Users Table Name
    Value:
      Ref: UsersTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-UsersTableName
  MessagesTableName:
    Description: DynamoDB Messages Table Name
    Value:
      Ref: MessagesTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-MessagesTableName
